local max_speed = 400

function init(self)
	msg.post(".", "acquire_input_focus")
	self.speed = 0
end

function update(self, dt)
	local p = go.get_position()
-- 	local velocity = go.get("#bouncer", "linear_velocity")
-- 	local windowLength, windowHeight = window.get_size()
-- 
-- 	-- disable vertical velocity
-- 	go.set("#bouncer", "linear_velocity", vmath.vector3(vmath.vector3(windowLength / 2, 0, 0))

	-- reset bouncer if it is below y == 0 (this is only for bouncer that is falling)
	-- if p.y < 0 then
	-- 	print("FAILURE")
	-- 	go.set_position(vmath.vector3(windowLength / 2, windowHeight / 8, 0))
	-- 	go.set_rotation(vmath.quat(0, 0, 0, 0))
	-- 	go.set("#bouncer", "linear_velocity", vmath.vector3(0, 0, 0))
	-- move bouncer based on input
	p.x = p.x + self.speed * dt
	go.set_position(p)
	self.speed = 0
end

function on_message(self, message_id, message, sender)
	-- Handles collisions with wall for kinematic bouncer
	if message_id == hash("contact_point_response") and message.other_id ~= hash("/ball") then
		print(message.other_id)
		local newpos = go.get_position() + message.normal * message.distance
		go.set_position(newpos)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("right") then
		self.speed = max_speed
	elseif action_id == hash("left") then
		self.speed = -max_speed
	end
end